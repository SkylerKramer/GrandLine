# this file uses fingerprints to tune and train linearly-activated SVMs for a full compound data set

# evaluation function
evlParVanCV <- function(modelingData, cost, epsilon) {
  rmse <- 0
  k <- 10
  
  set.seed(1234)
  kfoldInds <- sample(1:k, nrow(modelingData), replace = TRUE)

  for (i in 1:k){
    trainData <- modelingData[kfoldInds != i, , drop = F]
    testData <- modelingData[kfoldInds == i, , drop = F]

    model <- ksvm(CCS ~ ., data = trainData, type = "eps-svr", scaled = F,
                  kernel = "vanilladot",
                  C = cost, epsilon = epsilon)
    rmse[i] <- sqrt(mean((predict(model, newdata = testData) - testData$CCS) ^ 2))
  }

  return (mean(rmse))
}

# fitness function
fitFunVanCV <- function(x, modelingData) {
  cost_val <- x[1]
  epsilon_val <- x[2]

  rmse_vals <- evlParVanCV(modelingData, cost_val, epsilon_val)

  return (-mean(rmse_vals))
}

# the fingerprints used for this modeling
fps <- c("ap2d", "ap2dcount", "efp", "estate", "fp", "go", "kr", "krcount", "maccs", "pubchem", "substructure", "substructurecount")

library(kernlab)
library(GA)
library(doParallel)

for (i in 1:length(fps) {
  #read fp matrices
  fpLocation <- paste("PATH/TO/FILE/n_", fps[i], ".csv", sep = "")
  fpsData <- read.csv(fpLocation)

  # remove extraneous columns; still called scData even though superclasses are not considered
  scData <- fpsData[,-c(1:8)]

  #remove columns with 0 variance
  variances <- NA
  variances <- apply(scData, 2, var)
  variances <- names(variances[which(variances == 0)])
  scData <- scData[,-which(names(scData) %in% variances)]

  #split to tr and va
  set.seed(1234)
  scsamples <- sample(1:nrow(scData), size = 0.1*nrow(scData))
  scTr <- scData[-scsamples,]
  scVa <- scData[scsamples,]

  # tune
  bestVaError <- 1000000
  bestHyp <- c(0,0)
  
  # repeat 10 times to try to prevent the GA from falling into local optima
  for (k in 1:10) {
    kga <- ga(type = "real-valued", fitness = fitFunVanCV, scTr,
              names = c("cost", "epsilon"),
              lower = c(cost = 1e-4, epsilon = 1e-2),
              upper = c(cost = 10, epsilon = 2),
              monitor = T, optim = T, parallel = T, popSize = 50, maxiter = 300,
              run = 25)

    rbf <- ksvm(CCS ~ ., data = scTr, type = "eps-svr",
                scaled = T, kernel = "vanilladot", C = kga@solution[1],
                epsilon = kga@solution[2])

    trerror <- mean(abs(predict(rbf, scTr) - scTr$CCS) / scTr$CCS*100, na.rm = T)
    vaerror <- mean(abs(predict(rbf, scVa) - scVa$CCS) / scVa$CCS*100, na.rm = T)

    if(vaerror < bestVaError){
      bestVaError <- vaerror
      bestHyp <- c(kga@solution[1], kga@solution[2])
    }
  }

  #things to write to the file
  fpType <- paste("Fp:", fps[i], sep = " ")
  hyperparameters <- paste("C, eps:", bestHyp[1], ",",
                           bestHyp[2], sep = " ")
  errors <- paste("Tr and Va:", trerror, "and", vaerror, sep = " ")

  message <- paste(fpType, hyperparameters, errors, sep = "\n")
  write.table(message, file = "/storage/hpc/data/stk7c9/allfp_vanmodeling.txt",
              quote = F, append = T, col.names = F, row.names = F)
}
